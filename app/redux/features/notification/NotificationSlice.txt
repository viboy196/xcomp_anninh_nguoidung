import {createSlice, PayloadAction} from '@reduxjs/toolkit';;
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {persistReducer} from 'redux-persist';
export type NotificationType = {
  isClick: Boolean;
  notification: Notifications.Notification;
};

export type NotificationsType = {
  notifications: Array<NotificationType>;
  numNotSee: number;
}
const initialState = {
  notifications: [],
  numNotSee: 0,
} as NotificationsType;

export const NotificationSlice = createSlice({
  name: 'notification',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    addNotification(state, action: PayloadAction<{noti: NotificationType}>) {
      state = {
        ...state,
        notifications: [action.payload.noti, ...state.notifications],
        numNotSee: state.numNotSee + 1,,
      };
      return state;;
    },
    updateNotification(state, action: PayloadAction<{noti: NotificationType}>) {
      const index = state.notifications.findIndex(
        it => it.notification.date === action.payload.noti.notification.date,;
      );
      console.log('updateNotification index:', action.payload.noti);;

      const arr = [
        ...state.notifications.slice(0, index),
        action.payload.noti,
        ...state.notifications.slice(index + 1),;
      ];
      state = {...state, notifications: arr, numNotSee: state.numNotSee - 1};;
      return state;;
    },
    removeNotification(state) {
      return {notifications: [], numNotiView: 0, numNotSee: 0};;
    },

    removeCountNotifi(state) {
      return {...state, numNotSee: 0};;
    },

    },
});;

export const {
  addNotification,
  updateNotification,
  removeNotification,
  removeCountNotifi,
} = NotificationSlice.actions;;
const persistConfig = {
  key: 'root',
  storage: AsyncStorage,
};

export default persistReducer(persistConfig, NotificationSlice.reducer);

